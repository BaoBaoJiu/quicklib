QuickLib开发的初衷


    我在基金公司长期开发量化平台的过程中积累了不少心得和体会，也在CTP的开发群中认识了很多朋友，其中包括了本身就在基金公司任职并尝试开发的程序员，有丰富经验的量化交易平台开发者，也有为了满足自己交易进行开发的爱好者。他们大多数是用C++进行底层开发，有一些人会用JAVA、C#、Python、R、matlab等。但大多数人都必须自己从事底层开发，开发底层的周期是如此漫长，以至于很多自由交易者在开发过程中不得不脱离了策略本身。很多都是在开发底层1年后才开始做策略。开发时常常并没有考虑封装，和没有考虑封装使得策略和底层代码分离的重要性。导致即使开发完成了也留有一大堆BUG，在后期开发策略的过程中不断修复BUG。甚至有朋友学习开发半年后，由于最初架构设计不完善，需要推倒重来。开发者们都认为C++开发的程序运行效率较高，经常为了优化微乎其微的性能，耗费几天的时间。但在我看来，他们并不知道什么样的性能才能满足自己的要求，导致了过度优化。
对真正专业机构来说，除了高频策略以外，也很少直接用C++做策略开发的。通常是C++由程序员做底层的封装，然后由一种比较容易上手的编程语言做策略开发，这是比较科学高效的开发策略模式。而有一种不太科学的模式是，使用C++开发策略，比如基金公司有10个研究员每个人提出10个策略，交给专业的程序员做开发，那么程序员就需要开发100个策略，还需要后期不断根据要求修改，这样的开发模式简直是噩梦。
重复造轮子是没有意义的，为了要让交易者可以尽快进入到开发策略，我设计了Quicklib系列，其中包括：

    期货CTP PYTHON框架
    A股 CTP2 PYTHON框架
    集监控和管理与一身的监控器库，可以实现跨平台，并计划提供多种编程语言的支持
    资管平台的期货交易库


2017.1.1 QuickLib作者： QQ:147423661  林 
