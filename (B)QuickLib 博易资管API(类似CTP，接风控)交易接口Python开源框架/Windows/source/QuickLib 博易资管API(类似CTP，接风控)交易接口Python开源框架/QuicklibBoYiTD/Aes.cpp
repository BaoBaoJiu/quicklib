/////////////////////////////////////////////////////////////////////////////
//	aes.cpp (AES模块) 2006.11.15 程序:Qitao,Liusong,Zhangyong,张路
/////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
//#include "common.h"
#include "aes.h"
/////////////////////////////////////////////////////////////////////////////
static const unsigned N=4;				// 4个32位
static const unsigned char SRD[256]=	// S-box
{
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
	0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
	0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
	0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
	0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
	0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
	0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
	0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
	0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
	0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
	0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
	0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
	0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
	0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
	0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
	0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
	0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};
static const unsigned char INV_SRD[256]=	// ~S-box
{
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
	0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
	0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d,
	0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2,
	0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
	0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
	0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a,
	0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
	0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea,
	0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85,
	0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,
	0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20,
	0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31,
	0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
	0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0,
	0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26,
	0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};
static const unsigned char RC[30] =
{
	0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5
};
/////////////////////////////////////////////////////////////////////////////
inline static unsigned char time_02(unsigned char a)
{
	return (a<128) ? (a<<1) : (a<<1)^0x1b;
}
inline static unsigned char time_03(unsigned char a)
{
	return time_02(a)^a;
}
inline static unsigned char time_04(unsigned char a)
{
	return time_02(time_02(a));
}
inline static unsigned char time_09(unsigned char a)
{
	return time_04(time_02(a))^a;
}
inline static unsigned char time_0b(unsigned char a)
{
	unsigned char t = time_02(a);
	return time_04(t)^t^a;
}
inline static unsigned char time_0d(unsigned char a)
{
	unsigned char t = time_04(a);
	return time_02(t)^t^a;
}
inline static unsigned char time_0e(unsigned char a)
{
	unsigned char t = time_02(a=time_02(a));
	return time_02(t)^t^a;
}
/////////////////////////////////////////////////////////////////////////////
inline static void add_roundkey(unsigned char *state,const unsigned *key)
{
	unsigned *s = (unsigned*)state;
	for(unsigned i=0; i<N; i++)
		s[i] ^= key[i];
}
inline static void subbytes(unsigned char *state)
{
	for(unsigned i=0; i<N*4; i++)
		state[i] = SRD[state[i]];
}
inline static void inv_subbytes(unsigned char *state)
{
	for(unsigned r=0; r<N*4; r++)
		state[r] = INV_SRD[state[r]];
}
/////////////////////////////////////////////////////////////////////////////
inline static void shift_row(unsigned char *state) // N == 4 (must)
{
	unsigned char temp;
	temp	  = state[ 1];	// row 2
	state[ 1] = state[ 5];
	state[ 5] = state[ 9];
	state[ 9] = state[13];
	state[13] = temp;
	temp	  = state[ 2];	// row 3
	state[ 2] = state[10];
	state[10] = temp;
	temp	  = state[ 6];
	state[ 6] = state[14];
	state[14] = temp;
	temp	  = state[15];	// row 4
	state[15] = state[11];
	state[11] = state[ 7];
	state[ 7] = state[ 3];
	state[ 3] = temp;
}
inline static void inv_shift_row(unsigned char *state)	// N == 4 (must)
{
	unsigned char temp;
	temp	  = state[ 1];	// row 2
	state[ 1] = state[13];
	state[13] = state[ 9];
	state[ 9] = state[ 5];
	state[ 5] = temp;
	temp	  = state[ 2];	// row 3
	state[ 2] = state[10];
	state[10] = temp;
	temp	  = state[ 6];
	state[ 6] = state[14];
	state[14] = temp;
	temp	  = state[15];	// row 4
	state[15] = state[ 3];
	state[ 3] = state[ 7];
	state[ 7] = state[11];
	state[11] = temp;
}
/////////////////////////////////////////////////////////////////////////////
static void mix_columns(unsigned char *state)
{
	unsigned i,j;
	unsigned char s[N*4],sc[4][N];
	for(j=0; j<N; j++) for(i=0; i<4; i++) sc[i][j] = state[j*4+i];
	for(i=0; i<4; i++) for(j=0; j<N; j++) state[N*i+j] = sc[i][j];
	for(i=0; i<N; i++)
	{
		s[i    ] = time_02(state[i	  ])
			^ time_03(state[i+N  ])
			^		  (state[i+N*2])
			^		  (state[i+N*3]);

		s[i+  N] =		  (state[i	  ])
			^ time_02(state[i+N  ])
			^ time_03(state[i+N*2])
			^		  (state[i+N*3]);

		s[i+N*2] =		  (state[i	  ])
			^		  (state[i+N  ])
			^ time_02(state[i+N*2])
			^ time_03(state[i+N*3]);

		s[i+N*3] = time_03(state[i	  ])
			^		  (state[i+N  ])
			^		  (state[i+N*2])
			^ time_02(state[i+N*3]);
	}
	memcpy(state, s, N*4);
	for(j=0; j<N; j++) for(i=0; i<4; i++) sc[i][j] = state[j*4+i];
	for(i=0; i<4; i++) for(j=0; j<N; j++) state[N*i+j] = sc[i][j];
}
static void inv_mix_columns(unsigned char *state)
{
	unsigned i,j;
	unsigned char s[N*4],sc[4][N];
	for(j=0; j<N; j++) for(i=0; i<4; i++) sc[i][j] = state[j*4+i];
	for(i=0; i<4; i++) for(j=0; j<N; j++) state[N*i+j] = sc[i][j];
	for(i=0; i<N; i++)
	{
		s[i    ] = time_0e(state[i	  ])
			^ time_0b(state[i+N  ])
			^ time_0d(state[i+N*2])
			^ time_09(state[i+N*3]);
		s[i+N  ] = time_09(state[i	  ])
			^ time_0e(state[i+N  ])
			^ time_0b(state[i+N*2])
			^ time_0d(state[i+N*3]);
		s[i+N*2] = time_0d(state[i	  ])
			^ time_09(state[i+N  ])
			^ time_0e(state[i+N*2])
			^ time_0b(state[i+N*3]);
		s[i+N*3] = time_0b(state[i	  ])
			^ time_0d(state[i+N  ])
			^ time_09(state[i+N*2])
			^ time_0e(state[i+N*3]);
	}
	memcpy(state, s, N*4);
	for(j=0; j<N; j++) for(i=0; i<4; i++) sc[i][j] = state[j*4+i];
	for(i=0; i<4; i++) for(j=0; j<N; j++) state[N*i+j] = sc[i][j];
}
/////////////////////////////////////////////////////////////////////////////
bool Aes::LoadKey(const void *keydata,unsigned keysize)
{
	if(keysize!=16 && keysize!=24 && keysize!=32) return false;
	unsigned size = keysize;
	rounds = (N==4)?((size==16)?10:(size==24)?12:14):
		((N  != 6)?14:(size==32)?14:12);
	memcpy(exp_key, keydata, size);
	const unsigned NK = size/4;
	union
	{
		unsigned temp;
		unsigned char tb[4];
	};
	for(unsigned j=NK; j<N*(rounds+1); j++)
	{
		temp = exp_key[j-1];
		if(j%NK == 0)
		{
			unsigned char t;
			t	  = tb[0];		// rotate
			tb[0] = tb[1];
			tb[1] = tb[2];
			tb[2] = tb[3];
			tb[3] = t;
			tb[0] = SRD[tb[0]]; // subsitute
			tb[1] = SRD[tb[1]];
			tb[2] = SRD[tb[2]];
			tb[3] = SRD[tb[3]];
			tb[0]^= RC[j/NK];	// xor RC
		}
		else if((NK>6) && (j%NK == 4))
		{
			tb[0] = SRD[tb[0]];
			tb[1] = SRD[tb[1]];
			tb[2] = SRD[tb[2]];
			tb[3] = SRD[tb[3]];
		}
		exp_key[j] = exp_key[j-NK]^temp;
	}
	return true;
}
/////////////////////////////////////////////////////////////////////////////
void Aes::LoadExtKey(const void *keydata,unsigned round)
{
	rounds=round;
	memcpy(exp_key, keydata, sizeof(exp_key));
}
/////////////////////////////////////////////////////////////////////////////
void Aes::SaveExtKey(void *keydata,unsigned *round) const
{
	*round=rounds;
	memcpy(keydata, exp_key, sizeof(exp_key));
}
/////////////////////////////////////////////////////////////////////////////
void Aes::EncryptBlock(void *dst,const void *src) const
{
	memcpy(dst, src, N*4);
	if(!rounds) return;
	unsigned char *const state = (unsigned char *)dst;
	unsigned const *const rk = exp_key;
	add_roundkey(state, (unsigned *)rk);
	for(unsigned r=1; r<rounds; r++)
	{
		subbytes    (state);
		shift_row   (state);
		mix_columns (state);
		add_roundkey(state,&rk[r*N]);
	}
	subbytes    (state);				// last round
	shift_row   (state);
	add_roundkey(state,&rk[rounds*N]);
}
/////////////////////////////////////////////////////////////////////////////
void Aes::DecryptBlock(void *dst,const void *src) const
{
	memcpy(dst, src, N*4);
	if(!rounds) return;
	unsigned const *const rk = exp_key;
	unsigned char *const state = (unsigned char *)dst;
	add_roundkey (state,&rk[rounds*N]); // first round
	inv_shift_row(state);
	inv_subbytes (state);
	for(unsigned r=rounds-1; r>0; r--)
	{
		add_roundkey   (state,&rk[r*N]);
		inv_mix_columns(state);
		inv_shift_row  (state);
		inv_subbytes   (state);
	}
	add_roundkey(state,rk); 			// extro addtion
}
/////////////////////////////////////////////////////////////////////////////
